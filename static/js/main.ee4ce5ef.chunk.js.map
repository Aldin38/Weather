{"version":3,"sources":["Weather.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","dt","sys","sunset","type","placeholder","onChange","e","target","value","onKeyDownCapture","evt","key","fetch","then","res","json","result","console","log","name","country","d","day","getDay","dataBuilder","Date","moment","format","Math","round","temp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yPAQMA,G,MACC,oCADDA,EAEE,2CAsGOC,MAnGf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAiEb,OACE,yBAAKC,UAAmC,oBAAhBF,EAAQG,KAnB5BH,EAAQI,GAAKJ,EAAQK,IAAIC,OA1BE,SAA5BN,EAAQA,QAAQ,GAAGG,KACd,YAC8B,WAA5BH,EAAQA,QAAQ,GAAGG,KACpB,aAC6B,SAA5BH,EAAQA,QAAQ,GAAGG,KACpB,YAC6B,iBAA5BH,EAAQA,QAAQ,GAAGG,KACpB,mBACI,MAKkB,SAA5BH,EAAQA,QAAQ,GAAGG,KACb,iBAC8B,WAA5BH,EAAQA,QAAQ,GAAGG,KACpB,kBAC6B,SAA5BH,EAAQA,QAAQ,GAAGG,KACpB,iBAC6B,iBAA5BH,EAAQA,QAAQ,GAAGG,KACpB,wBACI,iBAwBwD,OAMpE,yBAAKD,UAAU,QACb,yBAAKA,UAAU,cACf,2BAAOK,KAAK,OAAOL,UAAU,aAAaM,YAAY,sBAAsBC,SAAU,SAAAC,GAAC,OAAIX,EAASW,EAAEC,OAAOC,QAAQA,MAAOd,EAAOe,iBAtE5H,SAAAC,GACA,UAAZA,EAAIC,KACLC,MAAM,GAAD,OAAIrB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACxDsB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJnB,EAAWmB,GACXrB,EAAS,IACXsB,QAAQC,IAAIF,GACXC,QAAQC,IAAIF,EAAOhB,WAgEU,oBAAhBJ,EAAQG,KACf,6BACF,yBAAKD,UAAU,gBACrB,yBAAKA,UAAU,YAAYF,EAAQuB,KAAnC,KAA2CvB,EAAQK,IAAImB,QAAvD,KACU,yBAAKtB,UAAU,QA3BP,SAACuB,GAElB,IAEGC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UAIjB,MAAM,GAAN,OAAUD,EAAV,KAoBaE,CAAY,IAAIC,MAAUC,MAASC,OAAO,QAIjD,yBAAK7B,UAAU,eACf,yBAAKA,UAAU,QAAQ8B,KAAKC,MAAMjC,EAAQG,KAAK+B,MAA/C,SAEA,yBAAKhC,UAAU,WAAWF,EAAQA,QAAQ,GAAGG,QAGvC,MC5FMgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.ee4ce5ef.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport moment from 'moment';\nimport \"./Weather.css\"\n\n\n\n\n\nconst api = {\n  key: \"2c51f99af252cadfc2f0892a7824bd59\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n} \n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\nconst search = evt =>{\nif(evt.key === \"Enter\"){\n  fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n   .then(res => res.json())\n   .then(result => { \n     setWeather(result);\n     setQuery('');\n   console.log(result);\n    console.log(result.dt)\n\n  \n  });\n}\n}\n\nconst day = () =>{\n  \n    if(weather.weather[0].main === \"Rain\"){\n     return 'app rainy';\n    }else if (weather.weather[0].main === \"Clouds\"){\n      return 'app cloudy'\n    }else if (weather.weather[0].main === \"Snow\"){\n      return 'app snowy'\n    }else if (weather.weather[0].main === \"Thunderstorm\"){\n      return 'app thunder-rain'\n    }else {return'app'};\n  }\n\n  const night = () =>{\n\n    if(weather.weather[0].main === \"Rain\"){\n      return 'app dark-rainy';\n     }else if (weather.weather[0].main === \"Clouds\"){\n       return 'app dark-clouds'\n     }else if (weather.weather[0].main === \"Snow\"){\n       return 'app dark-snowy'\n     }else if (weather.weather[0].main === \"Thunderstorm\"){\n       return 'app dark-thunder-rain'\n     }else {return'app dark-clear'};\n    \n  }\n\n  const imgChecker = () =>{\n    if( weather.dt < weather.sys.sunset){\n        return  day();\n    }else return night();\n  }\n\n\nconst dataBuilder = (d) => {\n\n   let days =[\"Sunday\", \"Monday\", \"TuesDay\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n  let day = days[d.getDay()];\n\n\n\n  return `${day} `\n\n}\n\n  return (\n    <div className={(typeof weather.main != \"undefined\")  ? imgChecker(): \"app\"}>\n\n\n\n\n      \n      <div className=\"main\">\n        <div className=\"search-box\">\n        <input type=\"text\" className=\"search-bar\" placeholder=\"Search Country/City\" onChange={e => setQuery(e.target.value)} value={query} onKeyDownCapture={search}></input>\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n          <div> \n        <div className=\"location-box\">\n  <div className=\"location\">{weather.name}, {weather.sys.country} </div>\n            <div className=\"date\">\n              {dataBuilder(new Date())}{ moment().format('LL')}\n              </div>\n\n        </div>\n        <div className=\"weather-box\">\n        <div className=\"temp\">{Math.round(weather.main.temp )}Â°C</div>\n         \n        <div className=\"weather\">{weather.weather[0].main}</div>\n        </div>\n        </div>\n         ) : ('')}\n        \n        \n </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Weather from './Weather';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Weather />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}